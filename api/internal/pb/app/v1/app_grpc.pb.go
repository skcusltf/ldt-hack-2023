// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/app/v1/app.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppServiceClient is the client API for AppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppServiceClient interface {
	// CreateBusinessUser is a public endpoint for creating a new business user account.
	// An initialized session token is returned on success.
	CreateBusinessUser(ctx context.Context, in *CreateBusinessUserRequest, opts ...grpc.CallOption) (*SessionToken, error)
	// UpdateBusinessUser is an authenticated endpoint which updates the currently authenticated business user's information.
	UpdateBusinessUser(ctx context.Context, in *UpdateBusinessUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteBusinessUser is an authenticated endpoint which deletes the currently authenticated business user's account.
	// Information about the user is stored for retrieval in already passed consultations, however,
	// the user will not be able to login anymore.
	DeleteBusinessUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateSession is a public endpoint for creating a new session for an existing user account,
	// both for businesses and authorities. An initialized session token is returned on success.
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*SessionToken, error)
	// GetSessionUser is an authenticated endpoint which returns the information about the currently authenticated user.
	GetSessionUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSessionUserResponse, error)
	// SendChatBotMessage is an authenticated endpoint for business users for sending message to
	// and receiving answers from the chatbot.
	SendChatBotMessage(ctx context.Context, in *SendChatBotMessageRequest, opts ...grpc.CallOption) (*SendChatBotMessageResponse, error)
	// RateChatBot is an endpoint for business users to like or dislike a bot's response.
	RateChatBot(ctx context.Context, in *RateChatBotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListConsultationTopics is an authenticated endpoint for business users for listing
	// possible choices during consultation registration.
	ListConsultationTopics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListConsultationTopicsResponse, error)
	// ListAvailableConsultationDates is an authenticated endpoint for business users for listing
	// available consultation dates for a specific authority in a given time range.
	ListAvailableConsultationDates(ctx context.Context, in *ListAvailableConsultationDatesRequest, opts ...grpc.CallOption) (*ListAvailableConsultationDatesResponse, error)
	// ListAvailableConsultationSlots is an authenticated endpoint for business users for listing
	// available consultation slots for a specific date during consultation
	ListAvailableConsultationSlots(ctx context.Context, in *ListAvailableConsultationSlotsRequest, opts ...grpc.CallOption) (*ListAvailableConsultationSlotsResponse, error)
	// CreateConsultationAppointment is an authenticated endpoint for business users for creating a consultation
	// appointment using the information retrieved via ListConsultationTopics and ListAvailableConsultationSlots.
	CreateConsultationAppointment(ctx context.Context, in *CreateConsultationAppointmentRequest, opts ...grpc.CallOption) (*CreateConsultationAppointmentResponse, error)
}

type appServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServiceClient(cc grpc.ClientConnInterface) AppServiceClient {
	return &appServiceClient{cc}
}

func (c *appServiceClient) CreateBusinessUser(ctx context.Context, in *CreateBusinessUserRequest, opts ...grpc.CallOption) (*SessionToken, error) {
	out := new(SessionToken)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/CreateBusinessUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) UpdateBusinessUser(ctx context.Context, in *UpdateBusinessUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/UpdateBusinessUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) DeleteBusinessUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/DeleteBusinessUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*SessionToken, error) {
	out := new(SessionToken)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) GetSessionUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSessionUserResponse, error) {
	out := new(GetSessionUserResponse)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/GetSessionUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) SendChatBotMessage(ctx context.Context, in *SendChatBotMessageRequest, opts ...grpc.CallOption) (*SendChatBotMessageResponse, error) {
	out := new(SendChatBotMessageResponse)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/SendChatBotMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) RateChatBot(ctx context.Context, in *RateChatBotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/RateChatBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListConsultationTopics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListConsultationTopicsResponse, error) {
	out := new(ListConsultationTopicsResponse)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/ListConsultationTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListAvailableConsultationDates(ctx context.Context, in *ListAvailableConsultationDatesRequest, opts ...grpc.CallOption) (*ListAvailableConsultationDatesResponse, error) {
	out := new(ListAvailableConsultationDatesResponse)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/ListAvailableConsultationDates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) ListAvailableConsultationSlots(ctx context.Context, in *ListAvailableConsultationSlotsRequest, opts ...grpc.CallOption) (*ListAvailableConsultationSlotsResponse, error) {
	out := new(ListAvailableConsultationSlotsResponse)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/ListAvailableConsultationSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServiceClient) CreateConsultationAppointment(ctx context.Context, in *CreateConsultationAppointmentRequest, opts ...grpc.CallOption) (*CreateConsultationAppointmentResponse, error) {
	out := new(CreateConsultationAppointmentResponse)
	err := c.cc.Invoke(ctx, "/ldt_hack.app.v1.AppService/CreateConsultationAppointment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServiceServer is the server API for AppService service.
// All implementations must embed UnimplementedAppServiceServer
// for forward compatibility
type AppServiceServer interface {
	// CreateBusinessUser is a public endpoint for creating a new business user account.
	// An initialized session token is returned on success.
	CreateBusinessUser(context.Context, *CreateBusinessUserRequest) (*SessionToken, error)
	// UpdateBusinessUser is an authenticated endpoint which updates the currently authenticated business user's information.
	UpdateBusinessUser(context.Context, *UpdateBusinessUserRequest) (*emptypb.Empty, error)
	// DeleteBusinessUser is an authenticated endpoint which deletes the currently authenticated business user's account.
	// Information about the user is stored for retrieval in already passed consultations, however,
	// the user will not be able to login anymore.
	DeleteBusinessUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// CreateSession is a public endpoint for creating a new session for an existing user account,
	// both for businesses and authorities. An initialized session token is returned on success.
	CreateSession(context.Context, *CreateSessionRequest) (*SessionToken, error)
	// GetSessionUser is an authenticated endpoint which returns the information about the currently authenticated user.
	GetSessionUser(context.Context, *emptypb.Empty) (*GetSessionUserResponse, error)
	// SendChatBotMessage is an authenticated endpoint for business users for sending message to
	// and receiving answers from the chatbot.
	SendChatBotMessage(context.Context, *SendChatBotMessageRequest) (*SendChatBotMessageResponse, error)
	// RateChatBot is an endpoint for business users to like or dislike a bot's response.
	RateChatBot(context.Context, *RateChatBotRequest) (*emptypb.Empty, error)
	// ListConsultationTopics is an authenticated endpoint for business users for listing
	// possible choices during consultation registration.
	ListConsultationTopics(context.Context, *emptypb.Empty) (*ListConsultationTopicsResponse, error)
	// ListAvailableConsultationDates is an authenticated endpoint for business users for listing
	// available consultation dates for a specific authority in a given time range.
	ListAvailableConsultationDates(context.Context, *ListAvailableConsultationDatesRequest) (*ListAvailableConsultationDatesResponse, error)
	// ListAvailableConsultationSlots is an authenticated endpoint for business users for listing
	// available consultation slots for a specific date during consultation
	ListAvailableConsultationSlots(context.Context, *ListAvailableConsultationSlotsRequest) (*ListAvailableConsultationSlotsResponse, error)
	// CreateConsultationAppointment is an authenticated endpoint for business users for creating a consultation
	// appointment using the information retrieved via ListConsultationTopics and ListAvailableConsultationSlots.
	CreateConsultationAppointment(context.Context, *CreateConsultationAppointmentRequest) (*CreateConsultationAppointmentResponse, error)
	mustEmbedUnimplementedAppServiceServer()
}

// UnimplementedAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppServiceServer struct {
}

func (UnimplementedAppServiceServer) CreateBusinessUser(context.Context, *CreateBusinessUserRequest) (*SessionToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusinessUser not implemented")
}
func (UnimplementedAppServiceServer) UpdateBusinessUser(context.Context, *UpdateBusinessUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessUser not implemented")
}
func (UnimplementedAppServiceServer) DeleteBusinessUser(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusinessUser not implemented")
}
func (UnimplementedAppServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*SessionToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedAppServiceServer) GetSessionUser(context.Context, *emptypb.Empty) (*GetSessionUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionUser not implemented")
}
func (UnimplementedAppServiceServer) SendChatBotMessage(context.Context, *SendChatBotMessageRequest) (*SendChatBotMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatBotMessage not implemented")
}
func (UnimplementedAppServiceServer) RateChatBot(context.Context, *RateChatBotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateChatBot not implemented")
}
func (UnimplementedAppServiceServer) ListConsultationTopics(context.Context, *emptypb.Empty) (*ListConsultationTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConsultationTopics not implemented")
}
func (UnimplementedAppServiceServer) ListAvailableConsultationDates(context.Context, *ListAvailableConsultationDatesRequest) (*ListAvailableConsultationDatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableConsultationDates not implemented")
}
func (UnimplementedAppServiceServer) ListAvailableConsultationSlots(context.Context, *ListAvailableConsultationSlotsRequest) (*ListAvailableConsultationSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableConsultationSlots not implemented")
}
func (UnimplementedAppServiceServer) CreateConsultationAppointment(context.Context, *CreateConsultationAppointmentRequest) (*CreateConsultationAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsultationAppointment not implemented")
}
func (UnimplementedAppServiceServer) mustEmbedUnimplementedAppServiceServer() {}

// UnsafeAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppServiceServer will
// result in compilation errors.
type UnsafeAppServiceServer interface {
	mustEmbedUnimplementedAppServiceServer()
}

func RegisterAppServiceServer(s grpc.ServiceRegistrar, srv AppServiceServer) {
	s.RegisterService(&AppService_ServiceDesc, srv)
}

func _AppService_CreateBusinessUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateBusinessUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/CreateBusinessUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateBusinessUser(ctx, req.(*CreateBusinessUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_UpdateBusinessUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).UpdateBusinessUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/UpdateBusinessUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).UpdateBusinessUser(ctx, req.(*UpdateBusinessUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_DeleteBusinessUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).DeleteBusinessUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/DeleteBusinessUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).DeleteBusinessUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_GetSessionUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).GetSessionUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/GetSessionUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).GetSessionUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_SendChatBotMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatBotMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).SendChatBotMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/SendChatBotMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).SendChatBotMessage(ctx, req.(*SendChatBotMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_RateChatBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateChatBotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).RateChatBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/RateChatBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).RateChatBot(ctx, req.(*RateChatBotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListConsultationTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListConsultationTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/ListConsultationTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListConsultationTopics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListAvailableConsultationDates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableConsultationDatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListAvailableConsultationDates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/ListAvailableConsultationDates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListAvailableConsultationDates(ctx, req.(*ListAvailableConsultationDatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_ListAvailableConsultationSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableConsultationSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).ListAvailableConsultationSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/ListAvailableConsultationSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).ListAvailableConsultationSlots(ctx, req.(*ListAvailableConsultationSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppService_CreateConsultationAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConsultationAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServiceServer).CreateConsultationAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ldt_hack.app.v1.AppService/CreateConsultationAppointment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServiceServer).CreateConsultationAppointment(ctx, req.(*CreateConsultationAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppService_ServiceDesc is the grpc.ServiceDesc for AppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ldt_hack.app.v1.AppService",
	HandlerType: (*AppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBusinessUser",
			Handler:    _AppService_CreateBusinessUser_Handler,
		},
		{
			MethodName: "UpdateBusinessUser",
			Handler:    _AppService_UpdateBusinessUser_Handler,
		},
		{
			MethodName: "DeleteBusinessUser",
			Handler:    _AppService_DeleteBusinessUser_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _AppService_CreateSession_Handler,
		},
		{
			MethodName: "GetSessionUser",
			Handler:    _AppService_GetSessionUser_Handler,
		},
		{
			MethodName: "SendChatBotMessage",
			Handler:    _AppService_SendChatBotMessage_Handler,
		},
		{
			MethodName: "RateChatBot",
			Handler:    _AppService_RateChatBot_Handler,
		},
		{
			MethodName: "ListConsultationTopics",
			Handler:    _AppService_ListConsultationTopics_Handler,
		},
		{
			MethodName: "ListAvailableConsultationDates",
			Handler:    _AppService_ListAvailableConsultationDates_Handler,
		},
		{
			MethodName: "ListAvailableConsultationSlots",
			Handler:    _AppService_ListAvailableConsultationSlots_Handler,
		},
		{
			MethodName: "CreateConsultationAppointment",
			Handler:    _AppService_CreateConsultationAppointment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/app/v1/app.proto",
}
